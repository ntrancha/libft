ifeq ($(OS),Windows_NT)
	OS = WIN32
    ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
        SYS = IA64
    endif
    ifeq ($(PROCESSOR_ARCHITECTURE),x86)
        SYS = IA32
    endif
else
   UNAME_S := $(shell uname -s)
   ifeq ($(UNAME_S),Linux)
       OS = LINUX
   endif
   ifeq ($(UNAME_S),Darwin)
       OS = OSX
   endif
   UNAME_P := $(shell uname -p)
   ifeq ($(UNAME_P),x86_64)
       SYS = IA64
   endif
   ifneq ($(filter %86,$(UNAME_P)),)
       SYS = IA32
   endif
   ifneq ($(filter arm%,$(UNAME_P)),)
       SYS = ARM
   endif
endif

all: reset binaire $(NAME)

update:
	@echo "Update ..."
	@git clone $(DEPOT) tmp > /dev/null 2> /dev/null
	@cd tmp/; cp -R * ..; cd ..; rm -rf tmp/
	@echo "Done"

$(NAME): $(OBJS)
	@if [ -f '$(NAME)' ]; then \
		error=1; \
	else \
		echo "Compilation [$(NAME)]"; \
		ar rc $@ $^; \
		ranlib $(NAME); \
		echo "Done"; \
	fi
  
%.o: %.c
	@if [ -f '$(NAME)' ]; then \
		error=1; \
	else \
		gcc $(FLAG) -c -o $@ $^ -fPIC; \
	fi

timestamp:
	@echo `/bin/date "+%s"` > t.nk

make:timestamp tools maker re

header:
	@echo "`./42-check_header`"

maker: header 
	@echo "`./42-makefile -all`"

.PHONY: verbose quiet clean fclean re install proto reset binaire fichier timestamp test dynamique make maker tools reboot finstall

dynamique: fclean reset binaire $(OBJS) libso
	 
libso:
	@echo "Compilation [libft.so]";
	@gcc -o libft.so -shared $(OBJS)
	@echo "Done;"
	@rm -rf $(OBJS)

verbose: binaire fichier $(OBJS)
	@if [ -f '$(NAME)' ]; then \
		error=1; \
	else \
		echo "Compilation [$(NAME)]"; \
		ar rc $(NAME) $(OBJS); \
		ranlib $(NAME); \
		echo "Done"; \
	fi

quiet: $(OBJS)
	@if [ -f '$(NAME)' ]; then \
		echo "$(NAME) exists"; \
	else \
		ar rc $(NAME) $^; \
		ranlib $(NAME); \
	fi
	 
clean:
	@rm -rf $(OBJS)
 
fclean: clean reset clean_tools
	@rm -rf $(NAME)

clean_tools:
	@rm -rf 42-*
			 
re: fclean all

finstall: reboot install
	
install: timestamp re tools
	@rm -rf $(OBJS)
	@echo "`/bin/date "+%s"` - `cat t.nk`" > t.nk
	@echo "in `cat t.nk | bc`s"
	@rm -rf t.nk

proto:
	@grep "^[a-z]" *.c | cut -d ":" -f 2
	@echo "total: `ls -R src/*.c | wc -l` fonction(s)"

binaire:
	@if [ -f '$(NAME)' ]; then \
   	    echo "$(NAME) exists"; \
	else \
		echo "$(shell find src/ -type f -print | grep .c$ | wc -l) files (Flags: $(FLAG)) on $(OS) $(SYS)"; \
		cat $(HEADER) | sed -e "s/OS_UNKNOW/$(OS)/g" > $(HEADER).nk; \
		mv $(HEADER).nk $(HEADER); \
		cat $(HEADER) | sed -e "s/SYS_UNKNOW/$(SYS)/g" > $(HEADER).nk; \
		mv $(HEADER).nk $(HEADER); \
	fi

reset:
	@cat $(HEADER) | sed -e "s/WIN32/OS_UNKNOW/g" > $(HEADER).nk; \
    mv $(HEADER).nk $(HEADER); \
    cat $(HEADER) | sed -e "s/OSX/OS_UNKNOW/g" > $(HEADER).nk; \
    mv $(HEADER).nk $(HEADER); \
    cat $(HEADER) | sed -e "s/LINUX/OS_UNKNOW/g" > $(HEADER).nk; \
    mv $(HEADER).nk $(HEADER);
	@cat $(HEADER) | sed -e "s/IA32/SYS_UNKNOW/g" > $(HEADER).nk; \
    mv $(HEADER).nk $(HEADER); \
    cat $(HEADER) | sed -e "s/IA64/SYS_UNKNOW/g" > $(HEADER).nk; \
    mv $(HEADER).nk $(HEADER); \
    cat $(HEADER) | sed -e "s/ARM/SYS_UNKNOW/g" > $(HEADER).nk; \
    mv $(HEADER).nk $(HEADER);

fichier:
	@if [ -f '$(NAME)' ]; then \
		error=1 ;\
    else \
		ls -1 *.c > ls.nk; \
		cat ls.nk; \
		rm ls.nk; \
	fi
	
test: fclean quiet fclean
	@echo "No error"
	@rm -rf $(OBJS)
	@rm -rf $(NAME)
	@git clone $(SCRIPT) script > /dev/null 2> /dev/null
	@python script/norme.py $(FILE)
	@script/./test_header.sh $(FILE)
	@script/./test_file_makefile.sh
	@rm -rf script

tools: clean_tools
	@echo "Tools creation ..."
	@gcc conf/src/select_lib.c			libft.a	-Iincludes/	-o	42-selec_lib
	@gcc conf/src/func_change_name.c	libft.a -Iincludes/ -o	42-func_change_name
	@gcc conf/src/proto.c				libft.a -Iincludes/ -o	42-check_header
	@gcc conf/src/functions.c			libft.a -Iincludes/ -o	42-list_proto
	@gcc conf/src/makemake.c			libft.a -Iincludes/ -o	42-makefile
	@echo "#!/bin/sh" 					>						42-update
	@chmod								755						42-update
	@echo " "							>>						42-update
	@echo "./42-check_header"			>>						42-update
	@echo "./42-makefile -all"			>>						42-update
	@echo "Done";
	
reboot:
	@echo "libft.h [restoration ...]"
	@cp conf/files/libft.h includes/
	@echo "Makefile [restoration ...]"
	@cp conf/files/Makefile_full Makefile

